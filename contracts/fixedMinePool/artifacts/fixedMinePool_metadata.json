{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "FPTA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "FPTB",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "USDC",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lockedPeriod",
						"type": "uint256"
					}
				],
				"name": "ChangeLockedPeriod",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "value1",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "value2",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value3",
						"type": "uint256"
					}
				],
				"name": "DebugEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "periodID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DistributePremium",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recieptor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LockAirDrop",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "RedeemMineCoin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "RedeemPremium",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "StakeFPTA",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lockedPeriod",
						"type": "uint256"
					}
				],
				"name": "StakeFPTB",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "UnstakeFPTA",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "UnstakeFPTB",
				"type": "event"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "addAddress",
						"type": "address"
					}
				],
				"name": "addWhiteList",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lockedPeriod",
						"type": "uint256"
					}
				],
				"name": "changeFPTBLockedPeriod",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "periodID",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "distributePremium",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCurrentPeriodID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getFPTAAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getFPTBAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					}
				],
				"name": "getMineInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getMineWeightRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					}
				],
				"name": "getMinerBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getOperator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "periodID",
						"type": "uint256"
					}
				],
				"name": "getPeriodFinishTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_time",
						"type": "uint256"
					}
				],
				"name": "getPeriodIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "currentID",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxPeriod",
						"type": "uint256"
					}
				],
				"name": "getPeriodWeight",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getStartTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTotalDistribution",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					}
				],
				"name": "getTotalMined",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTotalPremium",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					}
				],
				"name": "getUserCurrentAPY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getUserExpired",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getUserFPTABalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getUserFPTBBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getUserLatestPremium",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getUserMaxPeriodId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getWhiteList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "tmpAddress",
						"type": "address"
					}
				],
				"name": "isEligibleAddress",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "ftp_b_amount",
						"type": "uint256"
					}
				],
				"name": "lockAirDrop",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "redeemMinerCoin",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "redeemOut",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "redeemPremium",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "removeAddress",
						"type": "address"
					}
				],
				"name": "removeWhiteList",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "FPTA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "FPTB",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "USDC",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					}
				],
				"name": "setAddresses",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bool",
						"name": "halt",
						"type": "bool"
					}
				],
				"name": "setHalt",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "mineCoin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_mineAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_mineInterval",
						"type": "uint256"
					}
				],
				"name": "setMineCoinInfo",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "addAddress",
						"type": "address"
					}
				],
				"name": "setOperator",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stakeFPTA",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lockedPeriod",
						"type": "uint256"
					}
				],
				"name": "stakeFPTB",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstakeFPTA",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstakeFPTB",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A smart-contract which distribute some mine coins when user stake FPT-A and FPT-B coins.  ",
			"methods": {
				"addWhiteList(address)": {
					"details": "Implementation of add an eligible address into the whitelist.",
					"params": {
						"addAddress": "new eligible address."
					}
				},
				"changeFPTBLockedPeriod(uint256)": {
					"details": "Add FPT-B locked period.",
					"params": {
						"lockedPeriod": "FPT-B locked preiod number."
					}
				},
				"constructor": {
					"details": "constructor.",
					"params": {
						"FPTA": "FPT-A coin's address,staking coin",
						"FPTB": "FPT-B coin's address,staking coin",
						"USDC": "USDC coin's address,premium coin",
						"startTime": "the start time when this mine pool begin."
					}
				},
				"distributePremium(uint256,uint256)": {
					"details": "Distribute premium from foundation.",
					"params": {
						"amount": "premium amount.",
						"periodID": "period ID"
					}
				},
				"getCurrentPeriodID()": {
					"details": "getting current mine period ID."
				},
				"getFPTAAddress()": {
					"details": "getting function. Retrieve FPT-A coin's address"
				},
				"getFPTBAddress()": {
					"details": "getting function. Retrieve FPT-B coin's address"
				},
				"getMineInfo(address)": {
					"details": "retrieve minecoin distributed informations.",
					"params": {
						"mineCoin": "mineCoin address"
					},
					"return": "distributed amount and distributed time interval."
				},
				"getMineWeightRatio()": {
					"details": "getting whole pool's mine production weight ratio.     Real mine production equals base mine production multiply weight ratio."
				},
				"getMinerBalance(address,address)": {
					"details": "retrieve user's mine balance.",
					"params": {
						"account": "user's account",
						"mineCoin": "mineCoin address"
					}
				},
				"getPeriodFinishTime(uint256)": {
					"details": "convert period ID to period's finish timestamp.",
					"params": {
						"periodID": "period ID. "
					}
				},
				"getPeriodIndex(uint256)": {
					"details": "convert timestamp to period ID.",
					"params": {
						"_time": "timestamp. "
					}
				},
				"getPeriodWeight(uint256,uint256)": {
					"details": "Auxiliary function. get mine weight ratio from current period to one's maximium period.",
					"params": {
						"currentID": "current period ID.",
						"maxPeriod": "user's maximium period ID."
					}
				},
				"getStartTime()": {
					"details": "getting function. Retrieve mine pool's start time."
				},
				"getTotalDistribution()": {
					"details": "getting whole pool's mine shared distribution. All these distributions will share base mine production."
				},
				"getTotalMined(address)": {
					"details": "retrieve total distributed mine coins.",
					"params": {
						"mineCoin": "mineCoin address"
					}
				},
				"getTotalPremium()": {
					"details": "retrieve total distributed options premium."
				},
				"getUserCurrentAPY(address,address)": {
					"details": "Calculate user's current APY.",
					"params": {
						"account": "user's account.",
						"mineCoin": "mine coin address"
					}
				},
				"getUserExpired(address)": {
					"details": "getting user's locked expired time. After this time user can unstake FPTB coins.",
					"params": {
						"account": "user's account"
					}
				},
				"getUserFPTABalance(address)": {
					"details": "getting user's staking FPT-A balance.",
					"params": {
						"account": "user's account"
					}
				},
				"getUserFPTBBalance(address)": {
					"details": "getting user's staking FPT-B balance.",
					"params": {
						"account": "user's account"
					}
				},
				"getUserLatestPremium(address)": {
					"details": "get user's premium balance.",
					"params": {
						"account": "user's account"
					}
				},
				"getUserMaxPeriodId(address)": {
					"details": "getting user's maximium locked period ID.",
					"params": {
						"account": "user's account"
					}
				},
				"getWhiteList()": {
					"details": "Implementation of getting the eligible whitelist."
				},
				"initialize()": {
					"details": "initial function when the proxy contract deployed."
				},
				"isEligibleAddress(address)": {
					"details": "Implementation of testing whether the input address is eligible.",
					"params": {
						"tmpAddress": "input address for testing."
					}
				},
				"isOwner()": {
					"details": "Returns true if the caller is the current owner."
				},
				"lockAirDrop(address,uint256)": {
					"details": "Air drop to user some FPT-B coin and lock one period and get distribution for mining.",
					"params": {
						"ftp_b_amount": "FPT-B amount that transfer into mine pool.",
						"user": "air drop's recieptor."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"redeemMinerCoin(address,uint256)": {
					"details": "user redeem mine rewards.",
					"params": {
						"amount": "redeem amount.",
						"mineCoin": "mine coin address"
					}
				},
				"redeemOut(address,uint256)": {
					"details": "foundation redeem out mine coins.",
					"params": {
						"amount": "redeem amount.",
						"mineCoin": "mineCoin address"
					}
				},
				"redeemPremium(uint256)": {
					"details": "user redeem his options premium rewards.",
					"params": {
						"amount": "redeem amount."
					}
				},
				"removeWhiteList(address)": {
					"details": "Implementation of revoke an invalid address from the whitelist.",
					"params": {
						"removeAddress": "revoked address."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.      * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setAddresses(address,address,address,uint256)": {
					"details": "setting function.",
					"params": {
						"FPTA": "FPT-A coin's address,staking coin",
						"FPTB": "FPT-B coin's address,staking coin",
						"USDC": "USDC coin's address,premium coin",
						"startTime": "the start time when this mine pool begin."
					}
				},
				"setMineCoinInfo(address,uint256,uint256)": {
					"details": "Set mineCoin mine info, only foundation owner can invoked.",
					"params": {
						"_mineAmount": "mineCoin distributed amount",
						"_mineInterval": "mineCoin distributied time interval",
						"mineCoin": "mineCoin address"
					}
				},
				"setOperator(uint256,address)": {
					"details": "modify indexed operator by owner.       "
				},
				"stakeFPTA(uint256)": {
					"details": "Stake FPT-A coin and get distribution for mining.",
					"params": {
						"amount": "FPT-A amount that transfer into mine pool."
					}
				},
				"stakeFPTB(uint256,uint256)": {
					"details": "Stake FPT-B coin and lock locedPreiod and get distribution for mining.",
					"params": {
						"amount": "FPT-B amount that transfer into mine pool.",
						"lockedPeriod": "locked preiod number."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unstakeFPTA(uint256)": {
					"details": "withdraw FPT-A coin.",
					"params": {
						"amount": "FPT-A amount that withdraw from mine pool."
					}
				},
				"unstakeFPTB(uint256)": {
					"details": "withdraw FPT-B coin.",
					"params": {
						"amount": "FPT-B amount that withdraw from mine pool."
					}
				}
			},
			"title": "FNX period mine pool."
		},
		"userdoc": {
			"methods": {
				"setHalt(bool)": {
					"notice": "function Emergency situation that requires contribution period to stop or not."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/fixedMinePool/fixedMinePool.sol": "fixedMinePool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/ERC20/IERC20.sol": {
			"keccak256": "0x3f11e352b753d34c5b12012a5101fad6d2a35f539f31aa7d88aed2001c02f6fc",
			"urls": [
				"bzz-raw://9b2f9b94bc971554502db91b2224b9620fd724a4b374a05373cefcf737cade6a",
				"dweb:/ipfs/QmeuCBAi6GFzLbh3z8qby6acgjFJxKbywCP71oS9G3Hsna"
			]
		},
		"localhost/fixedMinePool/fixedMinePool.sol": {
			"keccak256": "0xd9c14e7f6a9fa10edec80e78564d23025959f6626b65515570582eabee51fbb7",
			"urls": [
				"bzz-raw://fa75471b8bff623852aa981e61132c0dca6515a0c721f654e61a85f4bfe2440d",
				"dweb:/ipfs/QmYEBfQP3C6MJhFB31DQGnnhXw8pKAVB6JYkNh9jMhyUg3"
			]
		},
		"localhost/fixedMinePool/fixedMinePoolData.sol": {
			"keccak256": "0xa708b8061389f7d2b49a4a1d618393bc9257d60c47fb2c768481dc03f1b642ad",
			"urls": [
				"bzz-raw://3ef9f7cc2b59fa0e02100a8e869b1bf9740d00e71f7c804536c3878ce98d1c47",
				"dweb:/ipfs/QmaeCi3imofaT9pNXAqjxynq1F5hKY7RPdigG1RX1HvFPK"
			]
		},
		"localhost/modules/AddressWhiteList.sol": {
			"keccak256": "0xbda1c751db06ff7d1c579fc30670116a31b1542e20415438f35e5d513e1204d6",
			"urls": [
				"bzz-raw://efdc5242c2b9aa5a41a0e4d0ab115546e2e7d69a03e7eb69230fe3ddc05ddf56",
				"dweb:/ipfs/QmYpCTWnXkaifsFPE4b9CqFjLvcUpRpsd2zfX3i5VoAbrF"
			]
		},
		"localhost/modules/Halt.sol": {
			"keccak256": "0x4decad501065bc7cac2133a68b8c1103ee4888b90318bed58706c47afe9c0c05",
			"urls": [
				"bzz-raw://bdb78b06241ec0d18a75acbd7c90ecb0bc3f1f21ddf4467e563b8ed1ba672271",
				"dweb:/ipfs/Qmc4hqMpXR32k5K1ygra9NDNgG3kFRexQ67DrDpsiMcuMF"
			]
		},
		"localhost/modules/Operator.sol": {
			"keccak256": "0x3183606f93d8566bee757f5a164a19f6c5b6d58f763bbb05054a19f6de21294b",
			"urls": [
				"bzz-raw://e23ea02455f2fb28859327ada6c61760e97a710035747db659f773f558a873ee",
				"dweb:/ipfs/QmNSSStPCNqZYbZWSv6cMLXLHZmNF9CLD7RsfJhBzN5idN"
			]
		},
		"localhost/modules/Ownable.sol": {
			"keccak256": "0xbee80fd7a5d8bfc985dfb69ab47d582835fbf1e3352598e9c75ee931d8201b5d",
			"urls": [
				"bzz-raw://e388e11e0172712bf10327ddee6df03aeebeda1218734aadb40b1d2a46567d8d",
				"dweb:/ipfs/QmXn5T5gAAZmNKWvXNV9YkuDv7h5ppvdYwACUT5yD7ycxD"
			]
		},
		"localhost/modules/ReentrancyGuard.sol": {
			"keccak256": "0x94e5c19b5d35ad0ff09a2e94616c24ced8f28c2e988be99a74d839b9d2036a6a",
			"urls": [
				"bzz-raw://ce65b1d27f18165385dc990738335da3e6acd1c144f3c82c0b85e8835dc9d404",
				"dweb:/ipfs/QmQnXdScAx2W1RXHWQiMchqGSzoEeKwCLFBqQ3hibQMYoX"
			]
		},
		"localhost/modules/SafeMath.sol": {
			"keccak256": "0xeb295b448107f6adee6c0861eba7cd58983eeb1a2bf9cd24b3df9c75fe17db75",
			"urls": [
				"bzz-raw://781a662595af8ecda052135a27529293189c1cdf40bc5e2934a62b3bc2b327ea",
				"dweb:/ipfs/QmNaGn5PyRCu3tfBu6mMwx3j2BHJiXWKiYGHSAu3au6P7S"
			]
		},
		"localhost/modules/initializable.sol": {
			"keccak256": "0x3c313cb7d6b570786c0d12caf0f1903022e60a56ba1184142ed647d84c88f0cb",
			"urls": [
				"bzz-raw://63941153459af5c2813421ca087102885ab8029baec37d2aea41665bc5d5d289",
				"dweb:/ipfs/QmY3P47Rc2nmRSBGFx6aF9bkQPxFwPMrBbu91iM1YK8ZsY"
			]
		},
		"localhost/modules/whiteList.sol": {
			"keccak256": "0xf77774a06a719d17391c46d647545a6de8828169476930cda266c82ae4ec3476",
			"urls": [
				"bzz-raw://599893aa12ecbf104b0c59d9a0d07d6cf5547798c0be3f9b4d081711d5be98a8",
				"dweb:/ipfs/Qmcs5UZ1BVTwMbW7TCVErKzhKDgduSu7sXu453T4fND7UG"
			]
		}
	},
	"version": 1
}