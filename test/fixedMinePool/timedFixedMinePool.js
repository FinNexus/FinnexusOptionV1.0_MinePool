const fixedMinePool = artifacts.require("fixedMinePool_Timed");
const CFNX = artifacts.require("CFNX");
const BN = require("bn.js");
let PeriodTime = 90*86400;
const {migrateTimedMinePool} = require("./testFunctions.js")
contract('fixedMinePool_Timed', function (accounts){
    it('fixedMinePool_Timed one person mined', async function (){
        let contracts = await migrateTimedMinePool(accounts);
        let nowId = await contracts.minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        await contracts.minePool.stakeFPTA(100000);
        await contracts.minePool.stakeFPTB(100000,2);
        await contracts.minePool.setMineCoinInfo(contracts.MINE.address,2000000,1);
        let userPeriodId = await contracts.minePool.getUserMaxPeriodId(accounts[0]);
        assert.equal(userPeriodId.toNumber(),nowId.toNumber()+1,"getUserMaxPeriodId Error");
        await contracts.minePool.setTime(5);
        nowId = await contracts.minePool.getCurrentPeriodID();

        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        let mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        let realMine = 2000000*5*6;

        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(10);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 2000000*10*6;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(15);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 2000000*10*6 + 2000000*5*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(20);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 2000000*10*6 + 2000000*10*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(25);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 2000000*10*6 + 2000000*10*5 + 2000000*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(55);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 2000000*10*6 + 2000000*10*5 + 2000000*35;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.redeemMinerCoin(contracts.MINE.address,mineBalance);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
    });
    it('fixedMinePool_Timed two persons mined', async function (){
        let contracts = await migrateTimedMinePool(accounts);
        let nowId = await contracts.minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        await contracts.minePool.stakeFPTA(100000);
        await contracts.minePool.stakeFPTB(100000,2);
        await contracts.minePool.setMineCoinInfo(contracts.MINE.address,2000000,1);
        let userPeriodId = await contracts.minePool.getUserMaxPeriodId(accounts[0]);
        assert.equal(userPeriodId.toNumber(),nowId.toNumber()+1,"getUserMaxPeriodId Error");
        await contracts.minePool.setTime(5);
        nowId = await contracts.minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        let mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        let realMine = 2000000*5*6;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.stakeFPTA(100000,{from:accounts[1]});
        await contracts.minePool.stakeFPTB(100000,4,{from:accounts[1]});
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
        await contracts.minePool.setTime(10);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(15);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*5*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*5*7;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(20);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*10*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*10*7;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(25);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*10*5 + 1000000*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*10*7 +1000000*5*6;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(35);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*10*5 + 1000000*15;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*10*7 +1000000*10*6 + 1000000*5*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(45);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*10*5 + 1000000*25;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*10*7 +1000000*10*6 + 1000000*10*5 +5000000;
        console.log("getMinerBalance",mineBalance.toString(),realMine);
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.setTime(55);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        realMine = 90000000+1000000*10*5 + 1000000*35;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.redeemMinerCoin(contracts.MINE.address,mineBalance);
        mineBalance = await contracts.minePool.getMinerBalance(accounts[0],contracts.MINE.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");

        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        realMine = 40000000+1000000*10*7 +1000000*10*6 + 1000000*10*5 +15000000;
        console.log("getMinerBalance",mineBalance.toString(),realMine);
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await contracts.minePool.redeemMinerCoin(contracts.MINE.address,mineBalance,{from:accounts[1]});
        mineBalance = await contracts.minePool.getMinerBalance(accounts[1],contracts.MINE.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
    });
});