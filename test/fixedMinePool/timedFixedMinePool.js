const fixedMinePool = artifacts.require("fixedMinePool_Timed");
const CFNX = artifacts.require("CFNX");
const BN = require("bn.js");
let PeriodTime = 90*86400;
contract('fixedMinePool_Timed', function (accounts){
    it('fixedMinePool_Timed one person mined', async function (){
        let CFNXA = await CFNX.new();
        let CFNXB = await CFNX.new();
        let USDC = await CFNX.new();
        let startTime = 10000000;
        let minePool = await fixedMinePool.new(CFNXA.address,CFNXB.address,USDC.address,startTime);
        await CFNXA.mint(accounts[0],1000000000000000);
        await CFNXA.approve(minePool.address,1000000000000000);
        await CFNXA.mint(minePool.address,1000000000000000);
        await CFNXB.mint(accounts[0],1000000000000000);
        await CFNXB.approve(minePool.address,1000000000000000);
        let nowId = await minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        await minePool.stakeFPTA(100000);
        await minePool.stakeFPTB(100000,2);
        await minePool.setMineCoinInfo(CFNXA.address,2000000,1);
        let userPeriodId = await minePool.getUserMaxPeriodId(accounts[0]);
        assert.equal(userPeriodId.toNumber(),nowId.toNumber()+1,"getUserMaxPeriodId Error");
        await minePool.setTime(5);
        nowId = await minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        let mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        let realMine = 2000000*5*6;

        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(10);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 2000000*10*6;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(15);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 2000000*10*6 + 2000000*5*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(20);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 2000000*10*6 + 2000000*10*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(25);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 2000000*10*6 + 2000000*10*5 + 2000000*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(55);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 2000000*10*6 + 2000000*10*5 + 2000000*35;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.redeemMinerCoin(CFNXA.address,mineBalance);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
    });
    it('fixedMinePool_Timed two persons mined', async function (){
        let CFNXA = await CFNX.new();
        let CFNXB = await CFNX.new();
        let USDC = await CFNX.new();
        let startTime = 10000000;
        let minePool = await fixedMinePool.new(CFNXA.address,CFNXB.address,USDC.address,startTime);
        await CFNXA.mint(accounts[0],1000000000000000);
        await CFNXA.approve(minePool.address,1000000000000000);
        await CFNXA.mint(minePool.address,1000000000000000);
        await CFNXB.mint(accounts[0],1000000000000000);
        await CFNXB.approve(minePool.address,1000000000000000);

        await CFNXA.mint(accounts[1],1000000000000000,);
        await CFNXA.approve(minePool.address,1000000000000000,{from:accounts[1]});
        await CFNXB.mint(accounts[1],1000000000000000);
        await CFNXB.approve(minePool.address,1000000000000000,{from:accounts[1]});
        let nowId = await minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        await minePool.stakeFPTA(100000);
        await minePool.stakeFPTB(100000,2);
        await minePool.setMineCoinInfo(CFNXA.address,2000000,1);
        let userPeriodId = await minePool.getUserMaxPeriodId(accounts[0]);
        assert.equal(userPeriodId.toNumber(),nowId.toNumber()+1,"getUserMaxPeriodId Error");
        await minePool.setTime(5);
        nowId = await minePool.getCurrentPeriodID();
        assert.equal(nowId.toNumber(),1,"getCurrentPeriodID Error");
        let mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        let realMine = 2000000*5*6;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.stakeFPTA(100000,{from:accounts[1]});
        await minePool.stakeFPTB(100000,4,{from:accounts[1]});
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
        await minePool.setTime(10);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(15);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*5*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*5*7;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(20);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*10*5;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*10*7;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(25);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*10*5 + 434782;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*10*7 +57391304;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(35);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*10*5 + 434782*3;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*10*7 +114782608 + 47826086;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(45);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*10*5 + 434782*4 + 5000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*10*7 +114782608 + 47826086*2 +5000000;
        console.log("getMinerBalance",mineBalance.toString(),realMine);
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.setTime(55);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        realMine = 90000000+1000000*10*5 + 434782*4 + 15000000;
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.redeemMinerCoin(CFNXA.address,mineBalance);
        mineBalance = await minePool.getMinerBalance(accounts[0],CFNXA.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");

        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        realMine = 40000000+1000000*10*7 +114782608 + 47826086*2 +15000000;
        console.log("getMinerBalance",mineBalance.toString(),realMine);
        assert(Math.abs(mineBalance.toNumber()-realMine)<10,"getMinerBalance error");
        await minePool.redeemMinerCoin(CFNXA.address,mineBalance,{from:accounts[1]});
        mineBalance = await minePool.getMinerBalance(accounts[1],CFNXA.address);
        assert.equal(mineBalance.toNumber(),0,"getMinerBalance error");
    });
});